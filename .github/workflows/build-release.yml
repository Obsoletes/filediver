on:
  release:
    types: [created]

permissions:
    contents: write
    packages: write

jobs:
  release-gui-linux:
    name: Release GUI Linux Binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
    - name: Build executable
      run: go build -ldflags="-s -w" -o filediver-gui/filediver-gui ./cmd/filediver-gui
    - name: Create archive
      run: zip -r filediver-gui-linux-amd64.zip filediver-gui/
    - name: Upload archive
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: filediver-gui-linux-amd64.zip

  release-gui-windows:
    name: Release GUI Windows Binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
    - name: Build executable
      run: go build -ldflags="-s -w -H=windowsgui" -o filediver-gui/filediver-gui ./cmd/filediver-gui
    - name: Upload executable
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: filediver-gui/filediver-gui.exe

  release-cli-linux:
    name: Release CLI Linux Binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
    - name: Prepare archive directory
      run: |
        mkdir filediver
        cp README.md LICENSE filediver/
    - name: Build executable
      run: go build -o filediver-cli/filediver ./cmd/filediver-cli
    - name: Create archive
      run: zip -r filediver-cli-linux-amd64.zip filediver-cli/
    - name: Upload archive
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: filediver-cli-linux-amd64.zip

  release-cli-windows:
    name: Release CLI Windows Binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '>=1.24'
    - name: Prepare archive directory
      run: |
        mkdir filediver
        cp README.md LICENSE filediver/
    - name: Build executable
      run: GOOS=windows GOARCH=amd64 go build -o filediver-cli/filediver.exe ./cmd/filediver-cli
    - name: Download FFmpeg binary
      run: |
        wget https://github.com/GyanD/codexffmpeg/releases/download/6.1.1/ffmpeg-6.1.1-essentials_build.zip
        unzip ffmpeg-6.1.1-essentials_build.zip ffmpeg-6.1.1-essentials_build/bin/ffmpeg.exe
        mv ffmpeg-6.1.1-essentials_build/bin/ffmpeg.exe filediver-cli/
    - name: Create archive
      run: zip -r filediver-cli-windows-amd64.zip filediver/
    - name: Upload archive
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: filediver-cli-windows-amd64.zip

  release-scripts-dist-windows:
    name: Release Helper Scripts (Windows)
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install uv by astral.sh
      run: powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
    - name: Build hd2_accurate_blender_importer executable
      run: |
        uv venv --python 3.11
        uv pip install pyinstaller bpy "numpy<2"
        uv run pyinstaller `
          -D --distpath ./scripts_dist `
          ./scripts/hd2_accurate_blender_importer.py `
          --add-data ./scripts/resources:resources `
          --collect-all bpy `
          --collect-submodules logging
    - name: Create scripts_dist archive
      run: |
        7z a scripts_dist_windows.zip ./scripts_dist
    - name: Upload archive
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: scripts_dist_windows.zip
